% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scca_compute.R
\name{scca_compute}
\alias{scca_compute}
\title{Spectral Clustering Correpondence Analysis.}
\usage{
scca_compute(
  m,
  iter.max = 10,
  nstart = 25,
  decomp = "svd",
  heuristic = eigengap_heuristic
)
}
\arguments{
\item{m}{A matrix representing a bi-partite or incidence graph. The matrix must have row names and column names.}

\item{iter.max}{Integer, the maximum number of iterations \code{kmeans} is allowed. Default is 10.}

\item{nstart}{Integer, number of random cluster centers kmeans may choose to start with. Default is 25.}

\item{decomp}{The decomposition function to use. Choices are 'svd' (default) and 'svds'.}

\item{heuristic}{The function to use for calculating the number of expected clusters.}
}
\value{
A tree which describes the hierarchical clustering process.
Each node in the tree represents a stage in the analysis. The subnodes  :
\describe{
  \item{depth}{The depth in the tree.}
  \item{labels}{The labels (rownames) of the cluster in this node}
  \item{child}{Number of this cluster among its siblings. No order intended}
  \item{spectrum}{Vector of the Eigen values found at this node. The Eigenvalues are
  sorted on explained variance in descending order.}
  \item{eigen_vec_1}{The first Eigenvector found in the cluster of this node}
  \item{eigen_vec_2}{The second ...}
  \item{eigen_vec_3}{The third ...}
  \item{k}{The number of relevant Eigenvalues. This is the value for parameter k of 'kmeans' }
  \item{node_type}{The value is 'leaf' if k equals 1, else 'branch'}
  \item{node}{A list of k child branches if node_type == 'branch'}
}
}
\description{
The function \code{scca_compute} performs a hierarchical, Spectral Clustering Correspondence Analysis on a
bi-partite or incidence matrix. The proces consists of a decompostion of the matrix (svd), a (user-provided) heuristic which transforms
transforms the decompostion to input for kmeans clustering and the kmeans clustering itself. Each of the resulting clusters (sub-matrices) can be analyzed again
And so on till some stopping condition is met.
The output of \code{sccs_compute} is a tree (list of lists) in which every node is a proces step.
The top node represents the first step on the entire matrix
}
\examples{
\dontrun{
data('carnivora', package = 'sccar')
scca_compute(carnivora)
}
}
